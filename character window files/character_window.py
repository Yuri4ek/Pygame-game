import pygame
from functions import load_image
import os
import subprocess


def get_coordinates():
    # –≤–∑—è—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–±—å–µ–∫—Ç–æ–≤
    with open("objects coordinates.txt", mode="r") as file:
        data = [l.split(";") for l in file.read().split("\n")]

    # —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
    size = width, height = list(map(int, data[0][2].split(",")))

    # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—å–µ–∫—Ç–æ–≤ –æ–∫–Ω–∞
    character_view_coordinates = list(map(int, data[1][1].split(",")))
    general_lvl_coordinates = list(map(int, data[2][1].split(",")))
    other_lvl_coordinates = list(map(int, data[3][1].split(",")))

    return (size, character_view_coordinates,
            general_lvl_coordinates, other_lvl_coordinates)


def level_calculating():
    # –±–µ—Ä–µ—Ç —É—Ä–æ–≤–Ω–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    with open("progress.txt", mode="r") as progress_file:
        specifications = [int(specification.split(":")[1])
                          for specification in
                          progress_file.read().split("\n")]

    level_specifications = [specification if specification > 1 else 0
                            for specification in specifications]

    total_level = 1 + sum(level_specifications)

    return total_level, specifications


def display_character(character_view_coordinates):
    x1, y1, x2, y2 = character_view_coordinates

    sprite = pygame.sprite.Sprite()

    # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    subprocess.run(["python", "make total character.py"])

    # –∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    current_dir = os.path.dirname(os.path.abspath(__file__))
    file_path = 'total_character.png'
    sprite.image = load_image(file_path, character_view_coordinates)

    # –ø–æ–º–µ—â–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
    sprite.rect = sprite.image.get_rect()
    sprite.rect.x, sprite.rect.y = x1, y1

    all_sprites.add(sprite)


def display_character_progress(general_lvl_coordinates, other_lvl_coordinates):
    total_level, specifications = level_calculating()
    arm, press, legs = specifications

    if general_lvl_coordinates:
        x1, y1, x2, y2 = general_lvl_coordinates

        # —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        text_size = y2 - y1
        font = pygame.font.Font(None, text_size)
        color = pygame.Color(255, 255, 255)

        # –≤—ã–≤–æ–¥ —É—Ä–æ–≤–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        text = font.render(f"–£—Ä–æ–≤–µ–Ω—å: {total_level}", True, color)
        window.blit(text, (x1, y1))

    if other_lvl_coordinates:
        x1, y1, x2, y2 = other_lvl_coordinates

        # —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        text_size = (y2 - y1) // 4
        font = pygame.font.Font(None, text_size)
        color = pygame.Color(255, 255, 255)

        texts = [f"–ü—Ä–æ–∫–∞—á–∫–∞",
                 f"—Ä—É–∫ ‚Äì {arm}",
                 f"–ø—Ä–µ—Å—Å–∞ ‚Äì {press}",
                 f"–Ω–æ–≥ ‚Äì {legs}"]

        # –≤—ã–≤–æ–¥ —É—Ä–æ–≤–Ω–µ–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        for i in range(len(texts)):
            text = font.render(texts[i], True, color)
            window.blit(text, (x1, y1 + i * text_size))


size, character_view_coordinates, \
    general_lvl_coordinates, other_lvl_coordinates = get_coordinates()

if __name__ == '__main__':
    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫–Ω–∞
    pygame.init()
    window = pygame.display.set_mode(size)
    pygame.display.set_caption("Pump It Upüí™üí™üí™")

    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞
    background_image = pygame.image.load('window.png')
    window.blit(background_image, (0, 0))

    # –≤—ã–≤–æ–¥ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    all_sprites = pygame.sprite.Group()
    display_character(character_view_coordinates)
    all_sprites.draw(window)

    # –≤—ã–≤–æ–¥ —É—Ä–æ–≤–Ω–µ–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    display_character_progress(general_lvl_coordinates, other_lvl_coordinates)

    # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞
    pygame.display.flip()

    # –∑–∞–ø—É—Å–∫ –æ–∫–Ω–∞
    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

    pygame.quit()
